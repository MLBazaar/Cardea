from .fhirbase import fhirbase


class CommunicationRequest(fhirbase):
    """A request to convey information; e.g. the CDS system proposes that an
    alert be sent to a responsible provider, the CDS system proposes that
    the public health agency be notified about a reportable condition.
    """

    def __init__(self, dict_values=None):
        # this is a communicationrequest resource
        self.resourceType = 'CommunicationRequest'
        # type = string
        # possible values: CommunicationRequest

        # a plan or proposal that is fulfilled in whole or in part by this
        # request.
        self.basedOn = None
        # type = array
        # reference to Reference: identifier

        # completed or terminated request(s) whose function is taken by this new
        # request.
        self.replaces = None
        # type = array
        # reference to Reference: identifier

        # a shared identifier common to all requests that were authorized more or
        # less simultaneously by a single author, representing the identifier of
        # the requisition, prescription or similar form.
        self.groupIdentifier = None
        # reference to Identifier: Identifier

        # the status of the proposal or order.
        self.status = None
        # type = string

        # the type of message to be sent such as alert, notification, reminder,
        # instruction, etc.
        self.category = None
        # type = array
        # reference to CodeableConcept: CodeableConcept

        # characterizes how quickly the proposed act must be initiated. includes
        # concepts such as stat, urgent, routine.
        self.priority = None
        # type = string

        # a channel that was used for this communication (e.g. email, fax).
        self.medium = None
        # type = array
        # reference to CodeableConcept: CodeableConcept

        # the patient or group that is the focus of this communication request.
        self.subject = None
        # reference to Reference: identifier

        # the entity (e.g. person, organization, clinical information system,
        # device, group, or care team) which is the intended target of the
        # communication.
        self.recipient = None
        # type = array
        # reference to Reference: identifier

        # the resources which were related to producing this communication
        # request.
        self.topic = None
        # type = array
        # reference to Reference: identifier

        # the encounter or episode of care within which the communication request
        # was created.
        self.context = None
        # reference to Reference: identifier

        # text, attachment(s), or resource(s) to be communicated to the recipient.
        self.payload = None
        # type = array
        # reference to CommunicationRequest_Payload: CommunicationRequest_Payload

        # the time when this communication is to occur.
        self.occurrenceDateTime = None
        # type = string

        # the time when this communication is to occur.
        self.occurrencePeriod = None
        # reference to Period: Period

        # for draft requests, indicates the date of initial creation.  for
        # requests with other statuses, indicates the date of activation.
        self.authoredOn = None
        # type = string

        # the entity (e.g. person, organization, clinical information system, or
        # device) which is to be the source of the communication.
        self.sender = None
        # reference to Reference: identifier

        # the individual who initiated the request and has responsibility for its
        # activation.
        self.requester = None
        # reference to CommunicationRequest_Requester: CommunicationRequest_Requester

        # describes why the request is being made in coded or textual form.
        self.reasonCode = None
        # type = array
        # reference to CodeableConcept: CodeableConcept

        # indicates another resource whose existence justifies this request.
        self.reasonReference = None
        # type = array
        # reference to Reference: identifier

        # comments made about the request by the requester, sender, recipient,
        # subject or other participants.
        self.note = None
        # type = array
        # reference to Annotation: Annotation

        # a unique id of this request for reference purposes. it must be provided
        # if user wants it returned as part of any output, otherwise it will be
        # autogenerated, if needed, by cds system. does not need to be the actual
        # id of the source system.
        self.identifier = None
        # type = array
        # reference to Identifier: Identifier

        if dict_values:
            self.set_attributes(dict_values)

    def get_relationships(self):

        return [
            {'parent_entity': 'Identifier',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'identifier'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'reasonReference'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'recipient'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'subject'},

            {'parent_entity': 'CodeableConcept',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'reasonCode'},

            {'parent_entity': 'CommunicationRequest_Payload',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'payload'},

            {'parent_entity': 'CodeableConcept',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'medium'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'topic'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'context'},

            {'parent_entity': 'CodeableConcept',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'category'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'basedOn'},

            {'parent_entity': 'Annotation',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'note'},

            {'parent_entity': 'Period',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'occurrencePeriod'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'replaces'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'sender'},

            {'parent_entity': 'CommunicationRequest_Requester',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'requester'},

            {'parent_entity': 'Identifier',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest',
             'child_variable': 'groupIdentifier'},
        ]


class CommunicationRequest_Payload(fhirbase):
    """A request to convey information; e.g. the CDS system proposes that an
    alert be sent to a responsible provider, the CDS system proposes that
    the public health agency be notified about a reportable condition.
    """

    def __init__(self, dict_values=None):
        # the communicated content (or for multi-part communications, one portion
        # of the communication).
        self.contentString = None
        # type = string

        # the communicated content (or for multi-part communications, one portion
        # of the communication).
        self.contentAttachment = None
        # reference to Attachment: Attachment

        # the communicated content (or for multi-part communications, one portion
        # of the communication).
        self.contentReference = None
        # reference to Reference: identifier

        # unique identifier for object class
        self.object_id = None

        if dict_values:
            self.set_attributes(dict_values)

    def get_relationships(self):

        return [
            {'parent_entity': 'Attachment',
             'parent_variable': 'object_id',
             'child_entity': 'CommunicationRequest_Payload',
             'child_variable': 'contentAttachment'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest_Payload',
             'child_variable': 'contentReference'},
        ]


class CommunicationRequest_Requester(fhirbase):
    """A request to convey information; e.g. the CDS system proposes that an
    alert be sent to a responsible provider, the CDS system proposes that
    the public health agency be notified about a reportable condition.
    """

    def __init__(self, dict_values=None):
        # the device, practitioner, etc. who initiated the request.
        self.agent = None
        # reference to Reference: identifier

        # the organization the device or practitioner was acting on behalf of.
        self.onBehalfOf = None
        # reference to Reference: identifier

        # unique identifier for object class
        self.object_id = None

        if dict_values:
            self.set_attributes(dict_values)

    def get_relationships(self):

        return [
            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest_Requester',
             'child_variable': 'onBehalfOf'},

            {'parent_entity': 'Reference',
             'parent_variable': 'identifier',
             'child_entity': 'CommunicationRequest_Requester',
             'child_variable': 'agent'},
        ]
