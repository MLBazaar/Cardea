{
    "name": "sklearn.linear_model.LogisticRegression",
    "contributors": [
        "Van Coykendall <vcoyk@mit.edu>",
        "Hector Dominguez <hedb_12@hotmail.com>"
    ],
    "documentation": "https://scikit-learn.org/stable/modules/generated/sklearn.linear_model.LogisticRegression.html",
    "description": "Logistic Regression (aka logit, MaxEnt) classifier.",
    "classifiers": {
        "type": "estimator",
        "subtype": "classifier"
    },
    "modalities": [],
    "primitive": "sklearn.linear_model.LogisticRegression",
    "fit": {
        "method": "fit",
        "args": [
            {
                "name": "X",
                "type": "ndarray"
            },
            {
                "name": "y",
                "type": "array"
            }
        ]
    },
    "produce": {
        "method": "predict",
        "args": [
            {
                "name": "X",
                "type": "ndarray"
            }
        ],
        "output": [
            {
                "name": "y",
                "type": "array"
            }
        ]
    },
    "hyperparameters": {
        "fixed": {
            "n_jobs": {
                "type": "int",
                "description": "Number of CPU cores used when parallelizing over classes if multi_class='ovr'. This parameter is ignored when the 'solver' is set to 'liblinear' regardless of whether 'multi_class' is specified or not. None means 1 unless in a joblib.parallel_backend context. -1 means using all processors",
                "default": null
            },
            "warm_start": {
                "type": "bool",
                "description": "When set to True, reuse the solution of the previous call to fit as initialization, otherwise, just erase the previous solution. Useless for liblinear solver.",
                "default": false
            },
            "random_state": {
                "type": "multitype",
                "description": "The seed of the pseudo random number generator to use when shuffling the data.",
                "types": {
                    "int": {
                        "description": "random_state is the seed used by the random number generator"
                    },
                    "RandomState": {
                        "description": "random_state is the random number generator."
                    },
                    "NoneType": {
                        "description": "If none, the random number generator is the RandomState instance used by np.random"
                    }
                },
                "default": null
            },
            "verbose": {
                "type": "bool",
                "description": "For the liblinear and lbfgs solvers set verbose to true for verbosity.",
                "default": false
            },
            "class_weight": {
                "type": "multitype",
                "types": {
                    "dict": {
                        "description": "Weights associated with classes in the form {class_label: weight}. If not given, all classes are supposed to have weight one."
                    },
                    "str": {
                        "values": [
                            "balanced"
                        ],
                        "description": "The 'balanced' mode uses the values of y to automatically adjust weights inversely proportional to class frequencies in the input data as n_samples / (n_classes * np.bincount(y))."
                    }
                },
                "description": "These weights will be multiplied with sample_weight (passed through the fit method) if sample_weight is specified.",
                "default": null
            }
        },
        "tunable": {
            "fit_intercept": {
                "type": "bool",
                "description": "Specifies if a constant (e.g. bias or intercept) should be added to the decision function",
                "default": true
            },
            "max_iter": {
                "type": "int",
                "description": "Useful only for the newton-cg, sag and lbfgs solvers. Maximum number of iterations taken for the solvers to converge.",
                "default": 100,
                "range": [
                    1,
                    100000
                ]
            },
            "solver": {
                "type": "str",
                "description": "Algorithm to use in the optimization problem. Note that 'sag' and 'saga' fast convergence is only guaranteed on features with approximately the same scale. You can preprocess the data with a scaler from sklearn.preprocessing.",
                "values": [
                    "newton-cg",
                    "lbfgs",
                    "liblinear",
                    "sag",
                    "saga"
                ],
                "default": "liblinear"
            },
            "penalty": {
                "type": "str",
                "values": [
                    "l1",
                    "l2"
                ],
                "description": "used to specify the norm used in the penalization. The 'newton-cg', 'sag' and 'lbfgs' solvers support only 'l2' penalties.",
                "default": "l2"
            },
            "C": {
                "type": "float",
                "description": "Inverse of regularization strength; must be a positive float. Like in support vector machines, smaller values specify stronger regularization.",
                "default": 1.0,
                "range": [
                    1e-06,
                    100.0
                ]
            },
            "multi_class": {
                "type": "str",
                "values": [
                    "ovr",
                    "multinomial",
                    "auto"
                ],
                "description": {
                    "ovr": "If set to 'ovr', then a binary problem is fit for each label.",
                    "multinomial": "If set to 'multinomial' the loss minimised is the multinomial loss fit across the entire probability distribution. 'multinomial' is unavailable when solver='liblinear'.",
                    "auto": "selects 'ovr' if the data is binary, or if solver='liblinear', and otherwise selects 'multinomial'."
                },
                "default": "ovr"
            },
            "intercept_scaling": {
                "type": "float",
                "description": "Useful only when the solver 'liblinear' is used and self.fit_intercept is set to True. In this case, x becomes [x, self.intercept_scaling], i.e. a 'synthetic' feature with constant value equal to intercept_scaling is appended to the instance vector. The intercept becomes intercept_scaling * synthetic_feature_weight.",
                "default": 1,
                "range": [
                    0.0001,
                    1000.0
                ]
            },
            "tol": {
                "type": "float",
                "description": "Tolerance for stopping criteria.",
                "default": 0.0001,
                "range": [
                    1e-06,
                    0.01
                ]
            },
            "dual": {
                "type": "bool",
                "description": "Dual or primal formulation. Dual formulation is only implemented for l2 penalty with liblinear solver. Prefer dual=False when n_samples > n_features.",
                "default": false
            }
        }
    }
}
